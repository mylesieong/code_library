Sheet1
	Language	Desc	Code Ref
	RPG	A hello world	DName             S             10A   inz('Myles')     
 /free                                                 
     dsply name;                                       
     return;                                           
	RPG	Define a character var and display it	Dnum              s             10i 0   
 /free                                  
     for num = 1 to 3;                  
        dsply ('i = ' + %char(num));    
     endfor;                            
     return;                            
	RPG	/**Define an integer var and display it in a loop**/	DCHAR             S              5A      
 /free                                   
   CHAR = 'HELLO';                       
   DSPLY CHAR;                           
   RETURN;                               
	RPG	/**Define a simple data structure and manipulate it **/	DInfo             DS                  QUALIFIED                               
DNAME                           10A   INZ('SAM')                              
DSALARY                          9P 2 INZ(50000.25)                           
DOTHERINFO        DS                  LIKEDS(INFO)                            
D                                     INZ(*LIKEDS)                            
 /free                                                                        
   dsply (info.name + 'has a salary of' + %CHAR(info.salary));                
   OtherInfo.name = 'JOE';                                                    
   OtherInfo.salary += 10000;                                                 
   dsply (otherInfo.name + 'has a salary of' + %CHAR(otherinfo.salary));      
   return;                                                                    
	RPG	/**Define an array and call built-in-time function **/	DDates            S               D   DATFMT(*ISO) DIM(3)                    
 /free                                                                       
   dates(1) = %DATE();                                                       
   dates(2) = dates(1) + %DAYS(1);                                           
   dates(3) = dates(1) + %YEARS(1);                                          
   dsply (%CHAR(dates(1)) + ' ' + %CHAR(dates(2)) + ' ' + %CHAR(dates(3)));  
   return;                                                                   
	RPG	/**Define an array of a user-defined data structure **/	D person          ds                  qualified                
D   name                        25a   varying                  
D   age                          5u 0                          
D families        ds                  qualified dim(5)         
D   address                     50a   varying                  
D   numPeople                    3u 0                          
D   people                            likeds(person) dim(8)    
 /free                                                         
    families(1).address = '10 Mockingbird Lane';               
    families(1).people(1).name = 'Alice';                      
    families(1).people(1).age = 3;                             
    families(1).people(2).name = 'Bill';                       
    families(1).people(2).age = 15;                            
    families(1).numPeople = 2;                                 
    dsply (families(1).people(1).name                          
         + ' is '                                              
         + %char(families(1).people(1).age)                    
         + ' years old.');                                     
    return;                                                    
	RPG	/**Call a program**/	D qcmdexc         pr                  extpgm('QCMDEXC')           
D    theCmd                   3000a   const                       
D    cmdLen                     15p 5 const                       
D    dbcs                        3a   const options(*nopass)      
D cmd             s            100a   varying                     
 /free                                                            
    cmd = 'DSPJOB OUTPUT(*PRINT)';                                
    qcmdexc (cmd : %len(cmd));                                    
    qcmdexc ('WRKSPLF' : 7);                                      
    return;                                                       
	RPG	DSPLY
EVAL	DName+++++++++++ETDsFrom+++To/L+++IDc.Keywords+++
DMSG              S             10A              
C                   EVAL      MSG = 'A message.' 
C     MSG           DSPLY                        
C                   RETURN                       
****************** End of data ******************
	RPG	EXFMT
IN03	FFilename++IPEASF.....L.....A.Device+.Keywords+
*************** Beginning of data *************
// MUPDSP is a WORKSTN file(DSPF) which prompts the user for an option.
// Based on what user enters, this program executes different
//subroutines to add, delete, or change a record.
FMUPDSP    CF   E             WORKSTN     
// If user enters F3 function key, indicator *IN03 is set
// on and the do while loop is exited.     
C                   DOW       *IN03 = *OFF     
// EXFMT writes out the prompt to the screen and expects user to
// enter an option. MUPINF is a record format name defined in the
// WORKSTN file and DSPMSG is a field defined in the record.
C                   EXFMT     MUPINF    
C                   EVAL      DSPMSG='A message from RPG program.'          
C                   ENDDO                      
C                   RETURN                     
****************** End of data ****************
	RPG	DATE	*************** Beginning of data **********************************
H DATFMT(*ISO)                                                      
D DATE_ISO        S               D                                 
D DATE_YMD        S               D   DATFMT(*YMD)                  
D                                     INZ(D'1992-03-24')            
D DATE_EUR        S               D   DATFMT(*EUR)                  
D                                     INZ(D'2197-08-26')            
D DATE_JIS        S               D   DATFMT(*JIS)                  
D NUM_DATE1       S              6P 0 INZ(210991)                   
D NUM_DATE2       S              7P 0                               
D CHAR_DATE       S              8    INZ('02/01/53')               
D CHAR_LONGJUL    S              8A   INZ('2039/166')               
D DATE_USA        S               D   DATFMT(*USA)                  
D MSG             S             30A                                 
C                   MOVE      'Before move:'MSG                     
C     MSG           DSPLY                                           
C     DATE_EUR      DSPLY                                           
C                   MOVE      'After move: 'MSG          
C     MSG           DSPLY                                
C                   MOVE      DATE_YMD      DATE_EUR     
C     DATE_EUR      DSPLY                                
C                   RETURN                               
	RPG	DATE	For more details on date issue, visit IBM RPGLE V7R1.pdf page.775
	RPG	EXSR	*************** Beginning of data *************************
D VAR_A           S             10A   INZ('Variable A')    
D VAR_B           S             10A   INZ('Variable B')    
 *******************Main Routine************************** 
C     VAR_A         DSPLY                                  
C                   RETURN                                 
 *******************Sub Routine*************************** 
C     SR1           BEGSR                                  
C     VAR_A         DSPLY                                  
C     VAR_B         DSPLY                                  
C                   ENDSR                                  
****************** End of data ****************************
	RPG	Loop a file	 * Define the target file                                                 
FTESTPF    UF A E           K DISK                                        
 * Define variables                                                       
DCOUNT            S             10S 0 INZ(0)                              
DMSG              S             50A                                       
 * Read and count the target file                                         
C                   READ      TESTPF                                      
C                   DOU       %EOF(TESTPF)                                
C                   EVAL      COUNT=COUNT+1                               
C                   READ      TESTPF                                      
C                   ENDDO                                                 
 * Output the counting process result                                     
C                   EVAL      MSG='The count of records is:'+%CHAR(COUNT) 
C     MSG           DSPLY                                                 
C                   RETURN                                                
	RPG	Read a file/ Subroutine	 **************************************************************************
 * Define the target file                                                  
FTESTPF2   UF A E           K DISK  
 * Read the first line of the target file and display V                    
C                  EXSR      DOREAD   
 ******************************************************************
 *************************SUBROUTINE-DOREAD************************
 ******************************************************************
C     DOREAD        BEGSR                                          
C     'InSR:DOREAD' DSPLY                                          
C                   READ      TESTPF2                              
C                   IF        NOT(%EOF(TESTPF2))                   
C                   EVAL      MSG='The first record:'+A+' '+B      
C     MSG           DSPLY                                          
C                   ENDIF                                          
C                   SETON                                        LR
C                   ENDSR                                          
	RPG	Write a file/ Subroutine	 ****************************************************************** 
 *************************SUBROUTINE-DOWRTE************************ 
 ****************************************************************** 
C     DOWRTE        BEGSR                                           
C     'InSR:DOWRTE' DSPLY                                           
C                   EVAL      A='NewA'                              
C                   EVAL      B='NewB'                              
C                   WRITE     RTESTPF                               
C                   SETON                                        LR 
C                   ENDSR                     
	RPG	Update a file/ Subroutine	 ****************************************************************** 
 *************************SUBROUTINE-DOUPDTE(not finish)*********** 
 ****************************************************************** 
C     DOUPDTE       BEGSR                                           
C     'InSR:DOUPDTE'DSPLY                                           
C     '001004    '  CHAIN     TESTPF2                               
C                   IF        %FOUND(TESTPF2)                       
C                   EVAL      A='00100x    '                        
C                   EVAl      B='AUTO_CTN'                          
C                   UPDATE    RTESTPF                               
C                   ENDIF                                           
C                   SETON                                        LR 
C                   ENDSR    
	RPG	Delete a file/ Subroutine	 ****************************************************************** 
 *************************SUBROUTINE-DODLT(not finish)************* 
 ****************************************************************** 
C     DODLT         BEGSR                                           
C     'InSR:DODLT'  DSPLY                                           
C     '001002    '  CHAIN     TESTPF2                               
C                   IF        %FOUND(TESTPF2)                       
C                   DELETE    TESTPF2                               
C                   ENDIF                                           
C                   SETON                                        LR 
C                   ENDSR                                                       
	SQLRPGLE	fix format/ handle single record/ pure SQL	0001.00 D xEMPLOYEE     E DS                  ExtName(EMPLOYEE)                        
0002.00 D xEMPHIST      E DS                  ExtName(EMPHIST)                         
0003.00 D currentKey      S              6S 0                                          
0004.00 D ytdNet          S              9S 2                                          
0005.00 D displayBytes    S             52A                                            
0006.00 C                   eval      currentKey = 400                                 
0007.00 C                   eval      ytdNet = *ZEROS                                  
0008.00 C                   eval      displayBytes = 'Acct('                           
0009.00 C                             + %trim(%editc(currentKey:'3'))                  
0010.00 C                             + ')'                                                                    
0012.00 C/EXEC SQL                                                                     
0013.00 C+  SELECT MCACCT, MCFNAME, MCLNAME, SUM(MHNET)                                
0014.00 C+  INTO :MCACCT, :MCFNAME, :MCLNAME, :ytdNet                                  
0015.00 C+  from EMPLOYEE, EMPHIST                                                     
0016.00 C+  where MCACCT = MHACCT                                                      
0017.00 C+      and MCACCT = :currentKey                                               
0018.00 C+  group by MCACCT, MCFNAME, MCLNAME                                          
0019.00 C/END-EXEC                                                                          
0021.00 C                   if        sqlState = *ZEROS                    
0022.00 C                   eval      displayBytes = %trim(displayBytes)   
0023.00 C                                  + ' ' + %trim(MCLNAME)          
0024.00 C                                  + ', ' + %trim(MCFNAME)         
0025.00 C                                  + ' Net: '                      
0026.00 C                                  + %trim(%editc(ytdNet: '1'))    
0027.00 C                   else                                           
0028.00 C                   eval      displayBytes = %trim(displayBytes)   
0029.00 C                                  + ': ' + ' NOT FOUND!'          
0030.00 C                   endif                                          
0031.00 C     displayBytes  dsply                                          
0032.00 C                   eval      *inlr = *ON                          
	SQLRPGLE	fix format/ handle multi records/ hybrid SQL & IO	0012.00 FTMSASSSTG UF A E           K DISK                                         
0013.00 FCUP027L3  IF   E           K DISK                                    
0017.00 DKBK              S              3  0 INZ(1)                                 
0022.00 C     KCUP027L3     KLIST                                                   
0023.00 C                   KFLD                    KBK                             
0024.00 C                   KFLD                    KCUTEN1          10                                                                    
0027.02 C                   EVAL      KBK = 1                                                    
0028.00 C/EXEC SQL                                                                  
0029.00 C+   DECLARE TMPASS CURSOR FOR                                              
0030.00 C+    SELECT CSHASSNUM                                                      
0031.00 C+    FROM TMSCSHSTG                                                        
0032.00 C+       WHERE  CSHASSNUM NOT IN                                            
0033.00 C+              (SELECT ASSNUM FROM TMSASSSTG)                              
0034.00 C+       AND CSHASSNUM <> ''                                                 
0037.00 C/END-EXEC                                                                                                                                     
0039.00 C/EXEC SQL                                                                    
0040.00 C+ OPEN TMPASS                                                                
0041.00 C/END-EXEC                                                                                                                                         
0043.00 C                   DOW       SQLCOD = 0                                      
0044.00 C/EXEC SQL FETCH TMPASS INTO :ASSNUM                                          
0045.00 C/END-EXEC                                                                    
0046.00 C                   IF        SQLCOD = 0                                                                                                     
0048.00 C                   EVAL      KCUTEN1  = ASSNUM                                                                                         
0050.00 C     KCUP027L3     CHAIN     CUP027L3                                        
0051.00 C                   IF        %FOUND(CUP027L3)                                
0052.00 C                   EVAL      ASSSTUDESC = CUTEN1                             
0053.00 C                   ELSE                                                      
0054.00 C                   EVAL      ASSSTUDESC = *BLANK                             
0055.00 C                   ENDIF                                                                                                 
0057.00 C                   WRITE     RTMSASSSTG                                 
0058.00 C                   ENDIF                                                
0059.00 C                   ENDDO                                                                                                          
0061.00 C/EXEC SQL                                                               
0062.00 C+ CLOSE TMPASS                                                          
0063.00 C/END-EXEC                                                               
0064.00 C                   SETON                                            LR  
	SQLRPGLE	fix format/ handle multi records/ pure SQL	0001.00 D xEMPLOYEE     E DS                  EXTNAME(EMPLOYEE)         
0002.00 D   ACCT        E                     EXTFLD(MCACCT)            
0003.00 D   FNAME       E                     EXTFLD(MCFNAME)           
0004.00 D   LNAME       E                     EXTFLD(MCLNAME)           
0005.00 D DISPLAYMSG      S             52A                             
0006.00 C/EXEC SQL                                                      
0007.00 C+   DECLARE c CURSOR FOR                                       
0008.00 C+      SELECT MCACCT, MCFNAME, MCLNAME                         
0009.00 C+      FROM YMYLES/EMPLOYEE                                    
0010.00 C+      WHERE MCFNAME LIKE 'S%'                                 
0011.00 C/END-EXEC                                                      
0012.00 C/EXEC SQL                                                      
0013.00 C+ OPEN c                                                       
0014.00 C/END-EXEC                                                      
0015.00 C                   DOW       SQLSTATE=*ZERO                    
0016.00 C/EXEC SQL FETCH c INTO :xEMPLOYEE                              
0017.00 C/END-EXEC                                                      
0018.00 C                   IF        SQLSTATE=*ZERO                    
0019.00 C                   EVAL      DISPLAYMSG=%TRIM(FNAME) + ' '     
0020.00 C                                   + %TRIM(LNAME)                     
0021.00 C     DISPLAYMSG    DSPLY                                              
0022.00 C                   ENDIF                                              
0023.00 C                   ENDDO                                              
0024.00 C                   SETON                                        LR    
	RPG	Iterate a file	0026.00 C                   READ      TESTPF       
0027.00 C                   DOU       %EOF(TESTPF) 
0028.00 C                   EVAL      COUNT=COUNT+1
0029.00 C                   READ      TESTPF       
0030.00 C                   ENDDO                  
0024.00 C                   SETON                                        LR    
	RPG	DS QUALIFIED/ MOVE	D@RWD             DS                  QUALIFIED    
DYR                       1      4                 
DMN                       5      6                 
DDY                       7      8                 
D@NUM             S              6P 0 INZ(30216)   
C                   MOVE      @NUM          @RWD   
C     @RWD.YR       DSPLY                          
C                   RETURN                         
	RPG-IMO	IMODULE/CBCMSTFF	0019.00 D@CIF             S             10A   INZ('0000368753')   
0020.00 D@ISBCM           S              1A   INZ('-')            
0021.00 C*                  MOVE      @NUM1         @RWD          
0022.00 C                   CALL      'CBCMSTFF'                  
0023.00 C                   PARM                    @CIF          
0024.00 C                   PARM                    @ISBCM        
0025.00 C     @ISBCM        DSPLY                                 
0026.00 C                   RETURN                                	問是否BCMSTF
	RPG-IMO	IMODULE/DFDDTOYY	0009.00 H DATEDIT(*YMD) DATFMT(*ISO) TIMFMT(*HMS)                                  
0011.00 D                 DS                                                       
0012.00 DSYMD                     1      8  0                                      
0013.00 D SYR                     1      4  0                                      
0014.00 D SMN                     5      6  0                                      
0015.00 D SDY                     7      8  0                                      
0023.00  *******************convert ddmmyy to yyyymmdd*****************************
0024.00 C                   MOVE      130216        WDMY              6 0          
0025.00 C                   MOVE      0             WYMD              8 0          
0026.00 C                   CALL      'DFDDTOYY'                                   
0027.00 C                   PARM                    WDMY                           
0028.00 C                   PARM                    WYMD                           
0029.00 C                   MOVE      WYMD          SYMD                           
0030.00 C     SYMD          DSPLY                                                  
0031.00 C                   RETURN                                                 	DMY轉YMD
	RPG	Temp var	0023.00 C                   MOVE      130216        WDMY              6 0
0024.00 C                   MOVE      0             WYMD              8 0
	RPG-IMO	IMODULE/DICBSBYMD	0010.00 DTMP              S              8  0           
0012.00 C                   CALL      'DICBSBYMD'       
0013.00 C                   PARM                    TMP 
0014.00 C     TMP           DSPLY                       
0015.00 C                   RETURN                      	拿昨天
	RPG-IMO	IMODULE/DCACNDTE	0010.00 DIPA1             S              8P 0 INZ(20160228)
0011.00 DIPA2             S              3P 0 INZ(6)       
0012.00 DIPA3             S              2P 0 INZ(1)       
0013.00 DIPA4             S              1A   INZ('D')     
0014.00 DIPA5             S              1A   INZ('M')     
0015.00 DOPA1             S              6P 0 INZ(0)       
0016.00 DOPA2             S              8P 0 INZ(0)       
0017.00 C                   CALL      'DCACNDTE'           
0018.00 C                   PARM                    IPA1   
0019.00 C                   PARM                    IPA2   
0020.00 C                   PARM                    IPA3   
0021.00 C                   PARM                    IPA4   
0022.00 C                   PARM                    IPA5   
0023.00 C                   PARM                    OPA1   
0024.00 C                   PARM                    OPA2   
0025.00 C     OPA1          DSPLY                          
0026.00 C     OPA2          DSPLY                          
0027.00 C                   RETURN                         	計X日/X月後(前- 第二PM為負數)
移日模式: 往前跨年會穿/移月模式: 往前跨年會穿
	RPG-IMO	IMODULE/DNBRDY1	0010.00 DIPA1             S              8P 0 INZ(20160228)
0011.00 DIPA2             S              8P 0 INZ(20160420)
0012.00 DOPA1             S              5P 0 INZ(0)       
0013.00 C                   CALL      'DNBRDY1'            
0014.00 C                   PARM                    IPA1   
0015.00 C                   PARM                    IPA2   
0016.00 C                   PARM                    OPA1   
0017.00 C     OPA1          DSPLY                          
0018.00 C                   RETURN                         	計算兩個YMD間的距離(須前比後小)
	RPG	convert numeric to date	0001.00 DYEAR             S              4P 0 INZ(0)                   
0002.00 DMONTH            S              2P 0 INZ(0)                   
0003.00 DDAY              S              2P 0 INZ(0)                   
0004.00 DFVARDTE          S               D   DATFMT(*ISO) INZ(*SYS)   
0005.00 C*                  EVAL      FVARDTE=%DATE()                  
0006.00 C                   MOVE      20160429      FVARDTE            
0007.00 C                   EVAL      YEAR=%SUBDT(FVARDTE: *YEARS)     
0008.00 C                   EVAL      MONTH=%SUBDT(FVARDTE: *MONTHS)   
0009.00 C                   EVAL      DAY=%SUBDT(FVARDTE: *DAYS)       
	RPG	convert date to number	0001.00 DFDTE             S               D   DATFMT(*ISO) INZ(*SYS)        
0002.00 DDTE              S              8P 0 INZ(0)                        
0003.00 C                   MOVE      20160429      FDTE                    
0005.00 C                   MOVE      FDTE          DTE                     
	RPG	convert dmy to ymd	0001.00 DFDTE             S               D   DATFMT(*ISO) INZ(*SYS) 
0002.00 DIN_DMY           S              6P 0 INZ(21216)             
0003.00 DOUT_YMD          S              8P 0                        
0004.00 C                   EVAL      FDTE=%DATE(IN_DMY:*DMY)        
0005.00 C                   MOVE      FDTE          OUT_YMD          
0008.00 C                   RETURN                                   
	RPG	SETLL, *START	0122.00  *******************sub: chk_typ**********************
0123.00 C     CHK_TYP       BEGSR                             
0124.00 C                   EVAL      CHK_TYP_I=0             
0125.00 C     *START        SETLL     LNSTPARM                
0126.00 C                   READ      LNSTPARM                
0127.00 C                   DOU       %EOF(LNSTPARM)          
0128.00 C     LNPMLNTYP     DSPLY                             
0129.00 C                   IF        LNTYPE=LNPMLNTYP        
0130.00 C                   EVAL      CHK_TYP_I=1             
0131.00 C                   ENDIF                             
0132.00 C                   READ      LNSTPARM                
0133.00 C                   ENDDO                             
0134.00 C                   ENDSR                             
	RPG	CHAIN	0002.00 FLNSTPARM  IF   E           K DISK                                 
0003.00 DKEY              S              3P 0                              
0004.00 DCHK              S              1P 0                              
0005.00 C                   EVAL      KEY=161                              
0006.00 C                   EVAL      CHK=0                                
0007.00 C     KEY           CHAIN     LNSTPARM                             
0008.00 C                   IF        %FOUND                               
0009.00 C                   EVAL      CHK=1                                
0010.00 C                   ENDIF                                          
0011.00 C     CHK           DSPLY                                          
0012.00 C                   SETON                                        LR
0013.00 C                   RETURN                                         
	RPG	CHAIN	0081.00 C     KCUP009LT     CHAIN     CUP009LT                           88 
0082.00 C  N88KCUP003       CHAIN     CUP003                             89 
0083.00 C  N89KCUP027       CHAIN     CUP027                                
0084.00 C  N89KCUP006       SETLL     CUP006                             90 
0085.00 C  N90              READ      CUP006                                
0086.00 C                   IF        *IN88 = *OFF AND *IN89 = *OFF         
	RPG	KLIST	0040.00  * Key for CUP009LT                                    
0041.00 C     KCUP009LT     KLIST                              
0042.00 C                   KFLD                    KBK        
0043.00 C                   KFLD                    KCUX1AP    
0044.00 C                   KFLD                    LNNOTE     
0045.00 C                                                      
0046.00  * Key for CUP006                                      
0047.00 C     KCUP006       KLIST                              
0048.00 C                   KFLD                    KBK        
0049.00 C                   KFLD                    CUX1CS     
0050.00 C                   KFLD                    KCUESDT    
0051.00 C                   KFLD                    KCUELNK    
0052.00 C                                                      
0053.00  * Key for CUP003                                      
0054.00 C     KCUP003       KLIST                              
0055.00 C                   KFLD                    KBK        
0056.00 C                   KFLD                    CUX1CS     
	RPG	SETLL	* All the 101 records in ORDFIL are to be printed. The value 101
* has previously been placed in ORDER. The SETLL operation
* positions the file at the first record with the key value 101
* and %EQUAL will return ’1’.
C
C ORDER SETLL ORDFIL
C
* The following DO loop processes all the records that have the
* same key value.
C
C IF %EQUAL
C DOU %EOF
C ORDER READE ORDFIL
C IF NOT %EOF
C EXCEPT DETAIL
C ENDIF
C ENDDO
C ENDIF
C
* The READE operation reads the second, third, and fourth 101
* records in the same manner as the first 101 record was read.
* After the fourth 101 record is read, the READE operation is
* attempted. Because the 102 record is not of the same group,
* %EOF will return ’1’, the EXCEPT operation is bypassed, and
* the DOU loop ends.
	RPG	EDITC	0001.00 DMSG              S             50A                                    
0002.00 Dsalary           S              9P 2 INZ(1000)                        
0003.00 Dyearsal          S             11P 2                                  
0004.00 C*                  EVAL      yearsal=salary * 12                      
0005.00 C*                  MOVE      yearsal       MSG                        
0006.00 C*                  EVAL      MSG=%CHAR(salary * 12)                   
0007.00 C*                  EVAL      MSG=%editc(salary * 12 :'A': *CURSYM)    
0008.00 C*                  EVAL      MSG=%editc(salary * 12 :'A': '&')        
0009.00 C                   EVAL      MSG=%editc(salary * 12 :'X')             
0010.00 C*                  EVAL      MSG=%editc(salary * 12 :'B': *ASTFILL)   
0011.00 C*                  EVAL      MSG=%editc(*date :'Y')                   
0012.00 C     MSG           DSPLY                                              
0013.00 C                   RETURN                                             
	RPG	Short-cut	Save: SEU Control Line "SAVE"
Search: SEU Control Line "KEYWORD" + Shift +  F4
Insert format line: F 
Insert line: I/ I8
Delete line: D/ DD pair
Move line: M/ MM pair
Copy line: C/ CC pair
Pos line: A/B (After/Before)
	RPG	COPY (I700BS/CFSORC)	0598.23 C/COPY CFSORC,SRP001  
0599.00 C/COPY CFSORC,SRP003  
0600.00 C/COPY CFSORC,SRP008  
0601.00 C/COPY CFSORC,SRP009  
0602.00 C/COPY CFSORC,SRP011  
0603.00 C/COPY CFSORC,SRP012  
0604.00 C/COPY CFSORC,SRP019  
0605.00 C/COPY CFSORC,SRP005  
	RPG	Define array content w ctdata	0001.00      H DATEDIT(*YMD) DATFMT(*ISO) TIMFMT(*HMS)           
0002.00      DArray            S              5A   DIM(5) CTDATA 
0003.00      C     Array(1)      DSPLY                           
0004.00      C                   RETURN                          
0005.00 ** CTDATA Array                                          
0006.00 Myles                                                    
0007.00 John                                                     
0008.00 Mary                                                     
0009.00 Tom                                                      
0010.00 Ken                                                      
	RPG	像莎翁的十四行詩一樣華麗的RPG
	RPG	KLIST	     C                   Z-ADD     1             BANK              3 0
     C                   MOVE      '1'           RECTYP            1
     C                   Z-ADD     20            APLNO             2 0
      *CUP009 key.
     C     KEY009        KLIST
     C                   KFLD                    BANK
     C                   KFLD                    RECTYP
     C                   KFLD                    PCIF
	RPG	PLIST	     C     *ENTRY        PLIST
     C                   PARM                    PCIF             10
     C                   PARM                    PIS_EMP           1
	RPG	CABXX, TAG	FieldA = 100.00
* FieldB = 105.00
* FieldC = ABC
* FieldD = ABCDE
**
Branch to TAGX.
C FieldA CABLT FieldB TAGX
**
Branch to TAGX.
C FieldA CABLE FieldB TAGX
**
Branch to TAGX; indicator 16 is off.
C FieldA CABLE FieldB TAGX 16
**
Branch to TAGX; indicator 17 is off, indicator 18 is on.
C FieldA CAB FieldB TAGX 1718
**
Branch to TAGX; indicator 19 is on.
C FieldA CAB FieldA TAGX 19
**
No branch occurs.
C FieldA CABEQ FieldB TAGX
**
No branch occurs; indicator 20 is on.
C FieldA CABEQ FieldB TAGX 20
**
No branch occurs; indicator 21 is off.
C FieldC CABEQ FieldD TAGX 21
C :
C TAGX TAG
	RPG	%SUBST	C                   EVAL      OUTPUTS=%SUBST(OUTPUT:1:45)  
	RPG	現成KLIST	      **************************************************************************
      * KEY DEFINE
      **************************************************************************
      * Key for CUP009LT
     C     KCUP009LT     KLIST
     C                   KFLD                    KBK
     C                   KFLD                    KCUX1AP
     C                   KFLD                    LNNOTE
     C
      * Key for CUP006
     C     KCUP006       KLIST
     C                   KFLD                    KBK
     C                   KFLD                    CUX1CS
     C                   KFLD                    KCUESDT
     C                   KFLD                    KCUELNK
     C
      * Key for CUP003
     C     KCUP003       KLIST
     C                   KFLD                    KBK
     C                   KFLD                    CUX1CS
     C
      * Key for CUP027
     C     KCUP027       KLIST
     C                   KFLD                    KBK
     C                   KFLD                    CUX1CS
	RPG	COPY	Example: ZEXOD/QRPGSRC(EXDAPP)
     E/COPY CFSORC,SRW000
     E/COPY CFSORC,SRW001
     E/COPY CFSORC,SRC000C
	RPG	Data area	C     *DTAARA       DEFINE                  EXDCAPPRM        32     
C                   IN        *DTAARA                               
C     EXDCAPPRM     DSPLY                                           
	RPG	PF and LF in same program	FACADBFSS  IF   E           K DISK                              
FFSSDBWRK  UF A E           K DISK                                    
FFSSDBWRKLFUF A E           K DISK    PREFIX('X')                     
F                                     RENAME(RFSSDBWRK:RLF)           
...
Please reference  ZAUTOPAY/QFSSSRC (FSSGDBPTY )




Sheet2


Sheet3


Sheet4


