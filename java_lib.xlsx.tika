Sheet1
	Language	Desc	Code Ref
	Java	Anonymous Inner Class	JButton testButton = new JButton("Test Button");
testButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(ActionEvent ae){
        System.out.println("Click Detected by Anon Class");
    }
});
	Apache common io	read a file	import org.apache.commona.io.FileUtils;
String fileContent=FileUtils.readFileToString(file);
	java	How to run a executable jar	1. java -jar *.jar {argus} : 直接針對該JAR調用MAIN
2. java -classpath *.jar com.*.*.* : 曲折地把該JAR加為CP, 然後用CP概念調用任一包含STATIC方法的類
	Maven	build a java project	$ mvn archetype:generate 
        -DgroupId=com.mycompany.app
        -DartifactId=my-app 
        -DarchetypeArtifactId=maven-archetype-quickstart 
        -DinteractiveMode=false
	Maven	import project to eclipse	1. Generate necessary config file for eclipse:
$mvn eclipse:eclipse -Dwtpversion=2.0
2. Imports it into Eclipse IDE
File -> Import… -> General -> Existing Projects into workspace
	Maven	build a web project	$ mvn archetype:generate 
        -DgroupId={project-packaging} 
        -DartifactId={project-name} 
        -DarchetypeArtifactId=maven-archetype-webapp 
        -DinteractiveMode=false
	Tomcat	basic command	$/etc/init.d/$ sudo ./tomcat6 start
$/etc/init.d/$ sudo ./tomcat6 stop
$/etc/init.d/$ sudo ./tomcat6 restart 
	J2EE	Read JSON from HttpRequest	import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
...
public void doPost(HttpServletRequest request, HttpServletResponse response)
  throws ServletException, IOException {

  StringBuffer jb = new StringBuffer();
  String line = null;
  try {
    BufferedReader reader = request.getReader();
    while ((line = reader.readLine()) != null)
      jb.append(line);
  } catch (Exception e) { /*report an error*/ }

  try {
    JSONObject jsonObject = JSONObject.fromObject(jb.toString());
  } catch (ParseException e) {
    // crash and burn
    throw new IOException("Error parsing JSON request string");
  }

  // Work with the data using methods like...
  // int someInt = jsonObject.getInt("intParamName");
  // String someString = jsonObject.getString("stringParamName");
  // JSONObject nestedObj = jsonObject.getJSONObject("nestedObjName");
  // JSONArray arr = jsonObject.getJSONArray("arrayParamName");
  // etc...
}

	J2EE	Write JSON to HttpResponse	response.setContentType("text/x-json;charset=UTF-8");           
response.setHeader("Cache-Control", "no-cache");
response.getWriter().write(json.toString());
OR
json.write(response.getWriter());
OR
response.getWriter().print(jsonObject);
response.getWriter().flush();
	GSON	cope api	class BagOfPrimitives {
  private int value1 = 1;
  private String value2 = "abc";
  private transient int value3 = 3;
  BagOfPrimitives() {
    // no-args constructor
  }
}

// Serialization
BagOfPrimitives obj = new BagOfPrimitives();
Gson gson = new Gson();
String json = gson.toJson(obj);  

// Deserialization
BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);
// ==> obj2 is just like obj
	GSON	maven repo	<dependencies>
    <!--  Gson: Java to Json conversion -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.6.2</version>
      <scope>compile</scope>
    </dependency>
</dependencies>
	jdk	Regex	Pattern p= new Pattern("[abc]");
Matcher m=p.getMatcher("subject");
Boolean result= m.matches();
	j2ee	HttpServletResponse Header Setting	import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ExampServlet extends HttpServlet {
  public void doPost(HttpServletRequest request, 
         HttpServletResponse response)
        throws ServletException, IOException
  {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();

    out.println("<title>Example</title>" +
       "<body bgcolor=FFFFFF>");

    out.println("<h2>Button Clicked</h2>");

    String DATA = request.getParameter("DATA");

    if(DATA != null){
      out.println(DATA);
    } else {
      out.println("No text entered.");
    }

    out.println("<P>Return to 
        <A HREF="../simpleHTML.html">Form</A>");
    out.close();
  }
}
	GSON	map json to class object	new Gson().fromJson(jsonString, ClassOfObject.class);
	GSON	parse olass object to json(string)	new Gson().toJson(obj);
	java	Change a string's encoding	package com.bcm.myles;

import java.util.*;
import java.io.*;

public class StringDecoder {
 
 public static class UnicodeFormatter  {

    static public String byteToHex(byte b) {
       // Returns hex String representation of byte b
       char hexDigit[] = {
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
       };
       char[] array = { hexDigit[(b >> 4) & 0x0f], hexDigit[b & 0x0f] };
       return new String(array);
    }

    static public String charToHex(char c) {
       // Returns hex String representation of char c
       byte hi = (byte) (c >>> 8);
       byte lo = (byte) (c & 0xff);
       return byteToHex(hi) + byteToHex(lo);
    }

 } // class
 
 public static void printBytes(byte[] array, String name) {
  for (int k = 0; k < array.length; k++) {
   System.out.println(name + "[" + k + "] = " + "0x" + UnicodeFormatter.byteToHex(array[k]));
  }
 }
 
 public static void main(String[] args) {
   System.out.println(System.getProperty("file.encoding"));
   String original = new String("A" + "\u00ea" + "\u00f1" + "\u00fc" + "C");
 
   try {
    byte[] utf8Bytes = original.getBytes("UTF8");
    byte[] defaultBytes = original.getBytes();
    String roundTrip = new String(utf8Bytes, "UTF8");
    
    System.out.println("original = " + original);
    System.out.println("roundTrip = " + roundTrip);
    
    printBytes(utf8Bytes, "utf8Bytes");
    printBytes(defaultBytes, "defaultBytes");
   } catch (UnsupportedEncodingException e) {
    e.printStackTrace();
   }
        
 } // main

}
	JDK	String encoding	package com.bcm.myles;

import java.util.*;
import java.io.*;

public class StringDecoder {
 
 public static class UnicodeFormatter  {

    static public String byteToHex(byte b) {
       // Returns hex String representation of byte b
       char hexDigit[] = {
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
       };
       char[] array = { hexDigit[(b >> 4) & 0x0f], hexDigit[b & 0x0f] };
       return new String(array);
    }

    static public String charToHex(char c) {
       // Returns hex String representation of char c
       byte hi = (byte) (c >>> 8);
       byte lo = (byte) (c & 0xff);
       return byteToHex(hi) + byteToHex(lo);
    }

 } // class
 
 public static void printBytes(byte[] array, String name) {
  for (int k = 0; k < array.length; k++) {
   System.out.println(name + "[" + k + "] = " + "0x" + UnicodeFormatter.byteToHex(array[k]));
  }
 }
 
 public static void main(String[] args) throws Exception {
  //System.setProperty("file.encoding","Cp1252");
  System.out.println(System.getProperty("file.encoding"));

  //System.out.println(System.getProperties());
  
  /*
   * (String) original: String base on Cp1252
   * (String) roundtrip: String base on UTF8
   * (byte[]) defaultBytes: bytes from Cp1252
   * (byte[]) utf8Bytes: bytes from UTF8
   */
  String original = new String("A" + "\u00ea" + "\u00f1" + "\u00fc" + "C");
  
  byte[] utf8Bytes = original.getBytes("UTF8");
  byte[] defaultBytes = original.getBytes();
  
  String roundTrip = new String(utf8Bytes, "UTF8");
  
  System.out.println("original = " + original);
  System.out.println("roundTrip = " + roundTrip);
  
  printBytes(utf8Bytes, "utf8Bytes");
  printBytes(defaultBytes, "defaultBytes");
 
        
 } // main

}

	JDK	Hex handling	 public static class UnicodeFormatter  {

    static public String byteToHex(byte b) {
       // Returns hex String representation of byte b
       char hexDigit[] = {
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
       };
       char[] array = { hexDigit[(b >> 4) & 0x0f], hexDigit[b & 0x0f] };
       return new String(array);
    }

    static public String charToHex(char c) {
       // Returns hex String representation of char c
       byte hi = (byte) (c >>> 8);
       byte lo = (byte) (c & 0xff);
       return byteToHex(hi) + byteToHex(lo);
    }

 } // class
	java	JDBC Connection
	Apache HttpComponents	HttpClient- Response handling	
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

/**
 * This example demonstrates the use of the {@link ResponseHandler} to simplify
 * the process of processing the HTTP response and releasing associated resources.
 */
public class ClientWithResponseHandler {

    public final static void main(String[] args) throws Exception {
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet("http://httpbin.org/");

            System.out.println("Executing request " + httpget.getRequestLine());

            // Create a custom response handler
            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {

                @Override
                public String handleResponse(
                        final HttpResponse response) throws ClientProtocolException, IOException {
                    int status = response.getStatusLine().getStatusCode();
                    if (status >= 200 && status < 300) {
                        HttpEntity entity = response.getEntity();
                        return entity != null ? EntityUtils.toString(entity) : null;
                    } else {
                        throw new ClientProtocolException("Unexpected response status: " + status);
                    }
                }

            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            System.out.println("----------------------------------------");
            System.out.println(responseBody);
        } finally {
            httpclient.close();
        }
    }

}

	Apache HttpComponents	HttpClient- Basic Authentication	import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

/**
 * A simple example that uses HttpClient to execute an HTTP request against
 * a target site that requires user authentication.
 */
public class ClientAuthentication {

    public static void main(String[] args) throws Exception {
        CredentialsProvider credsProvider = new BasicCredentialsProvider();
        credsProvider.setCredentials(
                new AuthScope("httpbin.org", 80),
                new UsernamePasswordCredentials("user", "passwd"));
        CloseableHttpClient httpclient = HttpClients.custom()
                .setDefaultCredentialsProvider(credsProvider)
                .build();
        try {
            HttpGet httpget = new HttpGet("http://httpbin.org/basic-auth/user/passwd");

            System.out.println("Executing request " + httpget.getRequestLine());
            CloseableHttpResponse response = httpclient.execute(httpget);
            try {
                System.out.println("----------------------------------------");
                System.out.println(response.getStatusLine());
                System.out.println(EntityUtils.toString(response.getEntity()));
            } finally {
                response.close();
            }
        } finally {
            httpclient.close();
        }
    }
}
	Java	Java Command Line	To call a java program on a command line, there are 2 ways:
1. Call the runnable jar: >java -jar NameOfJar.jar arg1 arg2...
2. Call the class: >java -cp {jar_path} com.myles.ClassName 

arg1 arg2...
	Spring	Basic CI & SI	Below xml is a whole xml contains basic contructor injection and setter injection:
------------------------------------------------------------------------------------------------------------------
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id="helloBean" class="com.bcm.client.HelloWorld">
    <property name="name" value="Myles" />
  </bean>
  
  <bean id="frameBean" class="javax.swing.JFrame">
    <constructor-arg value="Demo-Screen" />
  </bean>

  <bean id="panelBean" class="javax.swing.JPanel" />
  
  <bean id="layoutBean" class="java.awt.FlowLayout" />
  
  <bean id="labelBean" class="javax.swing.JLabel">
    <constructor-arg value="This is the label." />
  </bean>
  
  <bean id="buttonBean" class="javax.swing.JButton" />
  
</beans>
	Spring	Make a swing component	package com.bcm.client;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.bcm.client.autopay.collection.*;

import javax.swing.*;
import java.awt.FlowLayout;
import javax.swing.*;

public class Launcher {
  public static void main(String[] args) {
    ApplicationContext context = new ClassPathXmlApplicationContext("SpringBeans.xml");

// inject for a custom bean object
    HelloWorld obj1 = (HelloWorld) context.getBean("helloBean");
    obj1.printHello();
  
// inject for a jframe and its components
    JFrame frame = (JFrame) context.getBean("frameBean");
    JPanel panel = (JPanel) context.getBean("panelBean");
    FlowLayout layout = (FlowLayout) context.getBean("layoutBean");
    JLabel label = (JLabel) context.getBean("labelBean");
    JButton button = (JButton) context.getBean("buttonBean");
 
 panel.setLayout(layout);
 button.setText("Press me");
 panel.add(label);
 panel.add(button);
 frame.add(panel);
 frame.setSize(300, 300);
 frame.setLocationRelativeTo(null);
 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 frame.setVisible(true);
 }
}

	java	Get the current working path	用System 句柄
String workingDirectory = System.getProperty("user.dir");


jdbc  connection properties
	Where the URL is of the form:
	jdbc:oracle:<drivertype>:@<database>
	In addition to the URL, use an object of the standard Java Properties class as input. For example:
	java.util.Properties info = new java.util.Properties();
	info.put ("user", "scott");
	info.put ("password","tiger");
	info.put ("defaultRowPrefetch","15");
	getConnection ("jdbc:oracle:oci:@",info);
	Table 3-1 lists the connection properties that Oracle JDBC drivers support.
	Table 3-1 Connection Properties Recognized by Oracle JDBC Drivers  
	Name	Short Name	Type	Description
	user	n/a	String	the user name for logging into the database
	password	n/a	String	the password for logging into the database
	database	server	String	the connect string for the database
	internal_logon	n/a	String	a role, such as sysdba or sysoper, that allows you to log on as sys
	defaultRowPrefetch	prefetch	String (containing integer value)	the default number of rows to prefetch from the server (default value is "10")
	remarksReporting	remarks	String (containing boolean value)	"true" if getTables() and getColumns() should report TABLE_REMARKS; equivalent to using setRemarksReporting() (default value is "false")
	defaultBatchValue	batchvalue	String (containing integer value)	the default batch value that triggers an execution request (default value is "10")
	includeSynonyms	synonyms	String (containing boolean value)	"true" to include column information from predefined "synonym" SQL entities when you execute a DataBaseMetaDatagetColumns() call; equivalent to connection setIncludeSynonyms() call (default value is "false")
	processEscapes	String (containing boolean value)	"true" if escape processing is enabled for all statements, "false" if escape processing is disabled (default value is "false")

https://docs.oracle.com/cd/B10501_01/java.920/a96654/basic.htm
the source
	Source code of JDK 1.8 reading practice note/
	2/6/17	keyword "default" is added in jdk8 to extend interfaces to adopt lambda expression. So that adding new method in interface wont break the compilation and running of java code in new jre. E.g java.util.Collection
	2/6/17	read java.lang.Boolean
	1/19/17	File intputing for java utilities
Use System.getProperty("user.dir") can empower java utilities to take file input from relative filepath


